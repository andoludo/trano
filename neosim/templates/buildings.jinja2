{% import 'macros/macros.jinja2' as fn %}
model {{ network.name }}
package Medium = Buildings.Media.Air "Medium model";
package MediumW = Buildings.Media.Water "Medium model";

{% if network.name == "buildings_simple_hydronic" or network.name == "buildings_simple_hydronic_two_zones"%}
 parameter Integer nRoo = 2 "Number of rooms";
  parameter Modelica.Units.SI.Volume VRoo=4*6*3 "Volume of one room";
  parameter Modelica.Units.SI.Power Q_flow_nominal=2200
    "Nominal power of heating plant";
 // Due to the night setback, in which the radiator do not provide heat input into the room,
 // we scale the design power of the radiator loop
 parameter Real scaFacRad = 1.5
    "Scaling factor to scale the power (and mass flow rate) of the radiator loop";
  parameter Modelica.Units.SI.Temperature TSup_nominal=273.15 + 50 + 5
    "Nominal supply temperature for radiators";
  parameter Modelica.Units.SI.Temperature TRet_nominal=273.15 + 40 + 5
    "Nominal return temperature for radiators";
  parameter Modelica.Units.SI.Temperature dTRad_nominal=TSup_nominal -
      TRet_nominal "Nominal temperature difference for radiator loop";
  parameter Modelica.Units.SI.Temperature dTBoi_nominal=20
    "Nominal temperature difference for boiler loop";
  parameter Modelica.Units.SI.MassFlowRate mRad_flow_nominal=scaFacRad*
      Q_flow_nominal/dTRad_nominal/4200
    "Nominal mass flow rate of radiator loop";
  parameter Modelica.Units.SI.MassFlowRate mBoi_flow_nominal=scaFacRad*
      Q_flow_nominal/dTBoi_nominal/4200 "Nominal mass flow rate of boiler loop";
  parameter Modelica.Units.SI.PressureDifference dpPip_nominal=10000
    "Pressure difference of pipe (without valve)";
  parameter Modelica.Units.SI.PressureDifference dpVal_nominal=6000
    "Pressure difference of valve";
  parameter Modelica.Units.SI.PressureDifference dpRoo_nominal=6000
    "Pressure difference of flow leg that serves a room";
  parameter Modelica.Units.SI.PressureDifference dpThrWayVal_nominal=6000
    "Pressure difference of three-way valve";
  parameter Modelica.Units.SI.PressureDifference dp_nominal=dpPip_nominal +
      dpVal_nominal + dpRoo_nominal + dpThrWayVal_nominal
    "Pressure difference of loop";
{% endif %}

{%- set windows = []	 -%}
{% for node in network.graph.nodes %}
    {% if node.type == "Window" and node.construction.name not in windows %}
        {{ fn.create_glass(node.construction) }}
        {{ windows.append(node.construction.name) or "" }}
    {% endif %}
{% endfor %}
{% set constructions = []	 %}
{%- for node in network.graph.nodes -%}
    {% if node.type not in ("Space" , "Window" , "Occupancy" , "Weather", "Emission", "Valve", "Pump", "Boiler","SplitValve", "ThreeWayValve", "SpaceControl", "Control") and node.construction.name not in constructions %}
        {{ fn.create_construction(node.construction) }}
        {{ constructions.append(node.construction.name) or "" }}
    {% endif %}
{%- endfor %}
{%- for node in network.graph.nodes -%}
    {%- if node.type == "Space" -%}
        {{ fn.space_builder(node) }}
    {%- endif %}
{%- endfor %}
{%- for node in network.graph.nodes -%}
    {#line break#}
    {%- if node.type == "InternalElement" -%}
        {{ fn.create_internal_wall(node) }}
    {%- endif %}
        {%- if node.type == "Occupancy" -%}
        {{ fn.create_occcupancy(node) }}
    {%- endif %}
            {%- if node.type == "Weather" -%}
        {{ fn.create_weather(node) }}
    {%- endif %}
                {%- if node.type == "Emission" -%}
        {{ fn.create_emission(node) }}
    {%- endif %}

                {%- if node.type == "Pump" -%}
        {{ fn.create_pump(node) }}
    {%- endif %}

                {%- if node.type == "Boiler" -%}
        {{ fn.create_boiler(node) }}
    {%- endif %}
                    {%- if node.type == "Valve" -%}
        {{ fn.create_valve(node) }}
    {%- endif %}
                        {%- if node.type == "SplitValve" -%}
        {{ fn.create_split_valve(node) }}
    {%- endif %}
                            {%- if node.type == "ThreeWayValve" -%}
        {{ fn.create_three_way_valve(node) }}
    {%- endif %}

                                {%- if node.type == "SpaceControl" -%}
        {{ fn.create_space_control(node) }}
    {%- endif %}
                                    {%- if node.type == "Control" -%}
        {{ fn.create_control(node) }}
    {%- endif %}
{%- endfor %}
equation
{%- for edge in network.edge_attributes -%}
    {#line break#}
    {{ fn.connect(edge) }}
{%- endfor %}

end {{ network.name }};
