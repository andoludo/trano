{%- macro join_list(values) -%}
    {% raw %}{{% endraw %} {{ values | join(', ') }} {% raw %}}{% endraw %}
{%- endmacro %}

{%- macro connect_path(paths) -%}
    {% raw %}{{% endraw %}{%- for path in paths -%}{% raw %}{{% endraw %} {{ path | join(', ') }} {% raw %}}{% endraw %}
    {{ "," if not loop.last }}{%- endfor %}{% raw %}}{% endraw %}
{%- endmacro %}

{%- macro convert_tilts(boundary_tilts) -%}
    {% set tilts = ({"wall":"Buildings.Types.Tilt.Wall",
"ceiling":"Buildings.Types.Tilt.Ceiling",
"roof":"Buildings.Types.Tilt.Roof",
"floor":"Buildings.Types.Tilt.Floor"}) %}
    {% raw %}{{% endraw %} {%- for tilt in boundary_tilts -%}
    {{ tilts[tilt.value] }}{{ "," if not loop.last }} {%- endfor %}{% raw %}}{% endraw %}
{%- endmacro %}

{%- macro create_construction(construction) -%}
    parameter Buildings.HeatTransfer.Data.OpaqueConstructions.Generic {{ construction.name }}(
    final nLay={{ construction.layers|length }},
    absIR_a=0.9,
    absIR_b=0.9,
    absSol_a=0.6,
    absSol_b=0.6,
    material={
    {%- for layer in construction.layers -%}
        Buildings.HeatTransfer.Data.Solids.Generic(
        x={{ layer.thickness }},
        k={{ layer.material.thermal_conductivity }},
        c={{ layer.material.specific_heat_capacity }},
        d={{ layer.material.density }}){{ "," if not loop.last }}
    {%- endfor %}
    },
    roughness_a=Buildings.HeatTransfer.Types.SurfaceRoughness.Rough)
    annotation (Placement(transformation(extent={% raw %}{{20,84},{34,98}}{% endraw %})));
{%- endmacro %}

{%- macro space_builder(space) -%}
    Buildings.ThermalZones.Detailed.MixedAir {{ space.name }}(
    redeclare package Medium = Medium,
    AFlo={{ space.floor_area }},
    hRoo={{ space.height }},
    {%- for boundary in space.boundaries -%}
        {%- if boundary.type == 'ExternalWall' and boundary.number -%}
            {%- if boundary.number %}
                nConExt={{ boundary.number }},
                datConExt(
                {{ element_parameters(boundary) }},
                azi={{ join_list(boundary.azimuths) }}),
            {% else %}
                nConExt=0,
                {%- endif %}
        {%- endif %}
        {%- if boundary.type == "InternalElement"-%}
            {%- if boundary.number %}
            nSurBou={{ boundary.number }},
            surBou(
            A={{ join_list(boundary.surfaces) }},
            til={{ convert_tilts(boundary.tilts) }}),
        {% else %}
            nSurBou=0,
                {%- endif %}
        {%- endif %}
        {%- if boundary.type == "WindowedWall" -%}
            {%- if boundary.number %}
            nConExtWin={{ boundary.number }},
            datConExtWin(
            {{ element_parameters(boundary) }},
            glaSys={{ join_list(boundary.window_layers) }},
            wWin={{ join_list(boundary.window_width) }},
            hWin={{ join_list(boundary.window_height) }}),
            {% else %}
                nConExtWin=0,
                {%- endif %}
        {%- endif %}
        {%- if boundary.type == "FloorOnGround" -%}
            {%- if boundary.number %}
                nConBou={{ boundary.number }},
                datConBou(
                {{ element_parameters(boundary) }},
                azi={{ join_list(boundary.azimuths) }}),
            {% else %}
                nConBou=0,
                {%- endif %}
        {%- endif %}
    {%- endfor %}
    nConPar=0,
    energyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial)
    annotation (Placement(transformation(origin={{ join_list(space.position) }},extent={% raw %}{{-20,-20},{20,20}}
    {% endraw %})));
{%- endmacro %}


{% set connection = ({"Space_InternalElement":{"space": "surf_surBou", "other": ["port_b", "port_a"]},
"Space_Occupancy":{"space": "qGai_flow", "other": ["y"]},
"Space_Weather":{"space": "weaBus", "other": ["weaBus"]}
}) %}

{%- macro element_parameters(boundary) -%}
    layers={{ join_list(boundary.layers) }},
    A={{ join_list(boundary.surfaces) }},
    til={{ convert_tilts(boundary.tilts) }}
{%- endmacro %}


{%- macro connect(edge) -%}
    {% if edge.edge in connection %}
        {%- if edge.edge == 'Space_InternalElement' -%}
            connect({{ edge.space }}.{{ connection[edge.edge]["space"] }}[{{ edge.space_counter }}], {{ edge.other }}.
            {{ connection[edge.edge]["other"][edge.other_counter - 1] }} )
        {% else %}
            connect({{ edge.space }}.{{ connection[edge.edge]["space"] }}, {{ edge.other }}.
            {{ connection[edge.edge]["other"][0] }} )


        {%- endif %}

        annotation (Line(
        points={{ connect_path(edge.path) }},
        color={255,204,51},
        thickness=0.5,
        smooth=Smooth.None));
    {% endif %}
{%- endmacro %}


{% macro create_glass(construction) %}
    {% set glass_layers =    construction.layers | selectattr('layer_type', 'eq', "glass") | list %}
    {% set gas_layers =    construction.layers | selectattr('layer_type', 'eq', "gas") | list %}
    parameter Buildings.HeatTransfer.Data.GlazingSystems.Generic {{ construction.name }}(
    final glass={
    {% for layer in glass_layers %}
        Buildings.HeatTransfer.Data.Glasses.Generic(
        x={{ layer.thickness }},
        k={{ layer.material.thermal_conductivity }},
        tauSol={{ join_list(layer.material.solar_transmittance ) }},
        rhoSol_a={{ join_list(layer.material.solar_reflectance_outside_facing ) }},
        rhoSol_b={{ join_list(layer.material.solar_reflectance_room_facing ) }},
        tauIR={{ layer.material.infrared_transmissivity }},
        absIR_a={{ layer.material.infrared_absorptivity_outside_facing }},
        absIR_b={{ layer.material.infrared_absorptivity_room_facing }}){{ "," if not loop.last }}
    {% endfor %}
    },
    final gas={
    {% for layer in gas_layers %}
        {% if layer.layer_type == 'gas' %}
            Buildings.HeatTransfer.Data.Gases.Air(x={{ layer.thickness }}){{ "," if not loop.last }}
        {% endif %}
    {% endfor %}
    },
    UFra={{ construction.u_value_frame }})
    annotation (
    defaultComponentPrefixes="parameter",
    defaultComponentName="datGlaSys");
{% endmacro %}

{%- macro create_internal_wall(element) -%}
    Buildings.HeatTransfer.Conduction.MultiLayer {{ element.name }}(A = {{ element.surface }}, layers =
    {{ element.construction.name }}, stateAtSurface_a = true, stateAtSurface_b = true) "Partition wall between the two
    rooms" annotation(
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %}, rotation = 90)));
{%- endmacro %}

{%- macro create_occcupancy(element) -%}
    Neosim.Occupancy.SimpleOccupancy {{ element.name }} annotation (
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %}, rotation = 90)));
{%- endmacro %}

{%- macro create_weather(element) -%}
    Buildings.BoundaryConditions.WeatherData.ReaderTMY3 {{ element.name }}(filNam =
    Modelica.Utilities.Files.loadResource("modelica://Buildings/Resources/weatherdata/USA_IL_Chicago-OHare.Intl.AP.725300_TMY3.mos"))
    annotation (
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %}, rotation = 90)));
{%- endmacro %}
