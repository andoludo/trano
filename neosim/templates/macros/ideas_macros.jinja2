{%- macro join_list(values) -%}
    {% raw %}{{% endraw %} {{ values | join(', ') }} {% raw %}}{% endraw %}
{%- endmacro %}

{%- macro connect_path(paths) -%}
    {% raw %}{{% endraw %}{%- for path in paths -%}{% raw %}{{% endraw %} {{ path | join(', ') }} {% raw %}}{% endraw %}
    {{ "," if not loop.last }}{%- endfor %}{% raw %}}{% endraw %}
{%- endmacro %}


{%- macro create_material(material) -%}
    record {{ material.name }} = IDEAS.Buildings.Data.Interfaces.Material (
 k={{material.thermal_conductivity}},
      c={{material.specific_heat_capacity}},
      rho={{material.density}},
      epsLw=0.88,
      epsSw=0.55);
{%- endmacro %}

{%- macro create_construction(package_name, construction) -%}
      record {{ construction.name }}
    "{{ construction.name }}"
   extends IDEAS.Buildings.Data.Interfaces.Construction(
{#      incLastLay = IDEAS.Types.Tilt.Wall,#}
      mats={
        {%- for layer in construction.layers -%}
        {{ package_name }}.Data.Materials.{{ layer.material.name }}(d={{ layer.thickness }}){{ "," if not loop.last }}
        {%- endfor %}
    });
    end {{ construction.name }};
{%- endmacro %}

{%- macro space_builder(space) -%}

    IDEAS.Buildings.Components.Zone {{ space.name }}(
    mSenFac=0.822,
    V={{ space.volume }},
    n50=0.822*0.5*{{ space.name }}.n50toAch,
    redeclare package Medium = Medium,
    nSurf={{ space.number_merged_external_boundaries }},
    hZone={{ space.height }},
    T_start=293.15)
    annotation (Placement(transformation(origin={{ join_list(space.position) }},extent={% raw %}{{-20,-20},{20,20}}
    {% endraw %})));
{%- endmacro %}




{%- macro element_parameters(boundary) -%}
    layers={{ join_list(boundary.layers) }},
    A={{ join_list(boundary.surfaces) }},
    til={{ convert_tilts(boundary.tilts) }}
{%- endmacro %}


{%- macro connect(edge) -%}

connect({{ edge.left.equation }},{{ edge.right.equation }})
annotation (Line(
points={{ connect_path(edge.path) }},
color={255,204,51},
thickness=0.5,
smooth=Smooth.None));
{%- endmacro %}


{% macro create_glass(package_name, construction) %}
    record  {{ construction.name }} = IDEAS.Buildings.Data.Interfaces.Glazing (
          final nLay={{ construction.layers|length }},
      final checkLowPerformanceGlazing=false,
          mats={
        {%- for layer in construction.layers -%}
        {{ package_name }}.Data.Materials.{{ layer.material.name }}(d={{ layer.thickness }}){{ "," if not loop.last }}
        {%- endfor %}
    },
    final SwTrans=[0, 0.721;
                    10, 0.720;
                    20, 0.718;
                    30, 0.711;
                    40, 0.697;
                    50, 0.665;
                    60, 0.596;
                    70, 0.454;
                    80, 0.218;
                    90, 0.000],
      final SwAbs=[0, 0.082, 0, 0.062;
                  10, 0.082, 0, 0.062;
                  20, 0.084, 0, 0.063;
                  30, 0.086, 0, 0.065;
                  40, 0.090, 0, 0.067;
                  50, 0.094, 0, 0.068;
                  60, 0.101, 0, 0.067;
                  70, 0.108, 0, 0.061;
                  80, 0.112, 0, 0.045;
                  90, 0.000, 0, 0.000],
      final SwTransDif=0.619,
      final SwAbsDif={0.093, 0,  0.063},
      final U_value=2.9,
      final g_value=0.78

    ) "{{ package_name }}";
{#    final glass={#}
{#    {% for layer in construction.layers %}#}
{#        Buildings.HeatTransfer.Data.Glasses.Generic(#}
{#        x={{ layer.thickness }},#}
{#        k={{ layer.material.thermal_conductivity }},#}
{#        tauSol={{ join_list(layer.material.solar_transmittance ) }},#}
{#        rhoSol_a={{ join_list(layer.material.solar_reflectance_outside_facing ) }},#}
{#        rhoSol_b={{ join_list(layer.material.solar_reflectance_room_facing ) }},#}
{#        tauIR={{ layer.material.infrared_transmissivity }},#}
{#        absIR_a={{ layer.material.infrared_absorptivity_outside_facing }},#}
{#        absIR_b={{ layer.material.infrared_absorptivity_room_facing }}){{ "," if not loop.last }}#}
{#    {% endfor %}#}
{#    },#}
{#    final gas={#}
{#    {% for layer in gas_layers %}#}
{#        {% if layer.layer_type == 'gas' %}#}
{#            Buildings.HeatTransfer.Data.Gases.Air(x={{ layer.thickness }}){{ "," if not loop.last }}#}
{#        {% endif %}#}
{#    {% endfor %}#}
{#    },#}
{#    UFra={{ construction.u_value_frame }})#}
{#    annotation (#}
{#    defaultComponentPrefixes="parameter",#}
{#    defaultComponentName="datGlaSys");#}
{% endmacro %}

{%- macro create_merged_walls(package_name, element) -%}
    {% set tilts = tilts_processing_ideas(element) %}
    IDEAS.Buildings.Components.OuterWall[{{ element.constructions | length }}] {{ element.name }}(
    redeclare parameter {{ package_name }}.Data.Constructions.{{ element.constructions[0].name }} constructionType,
    A={{  join_list(element.surfaces)}},
    final azi={{join_list(element.azimuths)}},
    final inc={{join_list(tilts)}})  annotation(
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %})));
{%- endmacro %}

{%- macro create_merged_windows(package_name, element) -%}
    {% set tilts = tilts_processing_ideas(element) %}
    IDEAS.Buildings.Components.Window[{{ element.constructions | length }}] {{ element.name }}(
    redeclare parameter {{ package_name }}.Data.Glazing.{{ element.constructions[0].name }} glazing,
    A={{  join_list(element.surfaces)}},
    final azi={{join_list(element.azimuths)}},
    final inc={{join_list(tilts)}})  annotation(
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %})));
{%- endmacro %}

{%- macro create_floor_on_ground(package_name, element) -%}
    IDEAS.Buildings.Components.SlabOnGround {{ element.name }}(
    redeclare parameter {{ package_name }}.Data.Constructions.{{ element.construction.name }} constructionType,
    A={{  element.surface}})  annotation(
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %})));
{%- endmacro %}

{%- macro create_internal_wall(package_name, element) -%}
    IDEAS.Buildings.Components.InternalWall {{ element.name }}(redeclare parameter {{ package_name }}.Data.Constructions.{{ element.construction.name }} constructionType,
    A = {{ element.surface }}, inc = IDEAS.Types.Tilt.{{ element.tilt.value | capitalize }}, azi = {{ element.azimuth }}) "Partition wall between the two
    rooms" annotation(
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %})));
{%- endmacro %}

{%- macro create_occcupancy(element) -%}
    Neosim.Occupancy.SimpleOccupancy {{ element.name }} annotation (
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %})));
{%- endmacro %}




{%- macro create_emission(element) -%}
    IDEAS.Fluid.HeatExchangers.Radiators.RadiatorEN442_2 {{ element.name }}(
    redeclare package Medium = MediumW) "Radiator"
    annotation (
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %})));
{%- endmacro %}


{%- macro create_pump(element) -%}
    IDEAS.Fluid.Movers.FlowControlled_m_flow {{ element.name }}(
    redeclare package Medium = MediumW, m_flow_nominal = 1, dp_nominal = 100)
    annotation (
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %})));
{%- endmacro %}

{%- macro create_boiler(element) -%}
    Neosim.Fluid.Boilers.Simple {{ element.name }}(
    redeclare package Medium = MediumW) "Boiler"
    annotation (
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %})));
{%- endmacro %}


{%- macro create_valve(element) -%}
    IDEAS.Fluid.Actuators.Valves.TwoWayEqualPercentage {{ element.name }}(
    redeclare package Medium = MediumW) "Radiator valve"
    annotation (
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %})));
{%- endmacro %}

{%- macro create_split_valve(element) -%}
    IDEAS.Fluid.FixedResistances.Junction {{ element.name }} (
    redeclare package Medium = MediumW)
    "Flow splitter"
    annotation (
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %})));
{%- endmacro %}


{%- macro create_three_way_valve(element) -%}
    IDEAS.Fluid.Actuators.Valves.ThreeWayEqualPercentageLinear {{ element.name }}(
    redeclare package Medium = MediumW) "Three-way valve"
    annotation (
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %})));
{%- endmacro %}

{%- macro create_space_control(element) -%}
    Neosim.Controls.SpaceControls.PID {{ element.name }}(setPoint = 295.15, yMax = 1, yMin = 0)
    annotation (
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %})));
{%- endmacro %}

{%- macro create_control(element) -%}
    Modelica.Blocks.Sources.Constant {{ element.name }}(k= 1)
    annotation (
    Placement(transformation(origin = {{ join_list(element.position) }}, extent = {% raw %}{{-10, -10}, {10, 10}}
    {% endraw %})));
{%- endmacro %}
